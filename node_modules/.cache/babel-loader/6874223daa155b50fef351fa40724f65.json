{"ast":null,"code":"var _jsxFileName = \"/Users/aruna/GitHub/react-kpub1c/src/create-survey.js\",\n    _s = $RefreshSig$();\n\nimport { Button, Checkbox, Form, Input, Space } from 'antd';\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst CreateSurvey = () => {\n  _s();\n\n  const [survey, setSurvey] = useState([{\n    \"id\": 1,\n    \"questionType\": \"MCQ\",\n    \"answerList\": [{\n      \"id\": 1,\n      \"description\": \"0-20\"\n    }, {\n      \"id\": 2,\n      \"description\": \"21-30\"\n    }, {\n      \"id\": 3,\n      \"description\": \"31-40\"\n    }, {\n      \"id\": 4,\n      \"description\": \"\"\n    }, {\n      \"id\": 5,\n      \"description\": \"\"\n    }],\n    \"description\": \"What is your age range?\"\n  }, {\n    \"id\": 2,\n    \"questionType\": \"MCQ\",\n    \"answerList\": [{\n      \"id\": 1,\n      \"description\": \"ADL\"\n    }, {\n      \"id\": 2,\n      \"description\": \"Dialog\"\n    }, {\n      \"id\": 3,\n      \"description\": \"Mobitel\"\n    }, {\n      \"id\": 4,\n      \"description\": \"Ncell\"\n    }, {\n      \"id\": 5,\n      \"description\": \"XL\"\n    }],\n    \"description\": \"What is your company name?\"\n  }, {\n    \"id\": 3,\n    \"questionType\": \"OPEN_ENDED\",\n    \"answerList\": null,\n    \"description\": \"What is your company name?\"\n  }]);\n\n  const addMCQ = () => {\n    const newSurvey = { ...survey\n    };\n    const newMCQ = {\n      id: survey.length + 1,\n      questionType: \"MCQ\",\n      answerList: [{\n        id: 1,\n        description: \"\"\n      }, {\n        id: 2,\n        description: \"\"\n      }, {\n        id: 3,\n        description: \"\"\n      }]\n    };\n    newSurvey.push(newMCQ);\n    setSurvey(newSurvey);\n  };\n\n  const onFinish = values => {\n    console.log('Success:', values);\n  };\n\n  const onFinishFailed = errorInfo => {\n    console.log('Failed:', errorInfo);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Form, {\n    name: \"survey\",\n    labelCol: {\n      span: 8\n    },\n    wrapperCol: {\n      span: 16\n    },\n    initialValues: {\n      remember: true\n    },\n    onFinish: onFinish,\n    onFinishFailed: onFinishFailed,\n    autoComplete: \"off\",\n    children: [survey.length ? survey.map(question => {\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Form.Item, {\n          label: \"Description\",\n          name: question.id,\n          initialValue: question.description,\n          rules: [{\n            required: false,\n            message: 'Please input your username!'\n          }],\n          children: /*#__PURE__*/_jsxDEV(Input, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 15\n        }, this), question.questionType === \"MCQ\" ? question.answerList.map(answer => /*#__PURE__*/_jsxDEV(Form.Item, {\n          label: answer.id,\n          name: question.id + \"-\" + answer.id,\n          initialValue: answer.description,\n          rules: [{\n            required: false,\n            message: 'Please input your username!'\n          }],\n          children: /*#__PURE__*/_jsxDEV(Input, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 19\n        }, this)) : null]\n      }, void 0, true);\n    }) : 'button', /*#__PURE__*/_jsxDEV(Button, {\n      onClick: addMCQ,\n      type: 'dashed',\n      children: \"Add MCQ\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n      wrapperCol: {\n        offset: 8,\n        span: 16\n      },\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        type: \"primary\",\n        htmlType: \"submit\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CreateSurvey, \"aRAHQETxIWqLW+Sts2/TGcX/fCs=\");\n\n_c = CreateSurvey;\nexport default CreateSurvey;\n\nvar _c;\n\n$RefreshReg$(_c, \"CreateSurvey\");","map":{"version":3,"names":["Button","Checkbox","Form","Input","Space","React","useState","CreateSurvey","survey","setSurvey","addMCQ","newSurvey","newMCQ","id","length","questionType","answerList","description","push","onFinish","values","console","log","onFinishFailed","errorInfo","span","remember","map","question","required","message","answer","offset"],"sources":["/Users/aruna/GitHub/react-kpub1c/src/create-survey.js"],"sourcesContent":["import { Button, Checkbox, Form, Input, Space } from 'antd';\r\nimport React, { useState } from 'react';\r\n\r\nconst CreateSurvey = () => {\r\n  const [survey, setSurvey] = useState([\r\n    {\r\n      \"id\": 1,\r\n      \"questionType\": \"MCQ\",\r\n      \"answerList\": [\r\n        {\r\n          \"id\": 1,\r\n          \"description\": \"0-20\"\r\n        },\r\n        {\r\n          \"id\": 2,\r\n          \"description\": \"21-30\"\r\n        },\r\n        {\r\n          \"id\": 3,\r\n          \"description\": \"31-40\"\r\n        },\r\n        {\r\n          \"id\": 4,\r\n          \"description\": \"\"\r\n        },\r\n        {\r\n          \"id\": 5,\r\n          \"description\": \"\"\r\n        }\r\n      ],\r\n      \"description\": \"What is your age range?\"\r\n    },\r\n    {\r\n      \"id\": 2,\r\n      \"questionType\": \"MCQ\",\r\n      \"answerList\": [\r\n        {\r\n          \"id\": 1,\r\n          \"description\": \"ADL\"\r\n        },\r\n        {\r\n          \"id\": 2,\r\n          \"description\": \"Dialog\"\r\n        },\r\n        {\r\n          \"id\": 3,\r\n          \"description\": \"Mobitel\"\r\n        },\r\n        {\r\n          \"id\": 4,\r\n          \"description\": \"Ncell\"\r\n        },\r\n        {\r\n          \"id\": 5,\r\n          \"description\": \"XL\"\r\n        }\r\n      ],\r\n      \"description\": \"What is your company name?\"\r\n    },\r\n    {\r\n      \"id\": 3,\r\n      \"questionType\": \"OPEN_ENDED\",\r\n      \"answerList\": null,\r\n      \"description\": \"What is your company name?\"\r\n    }\r\n  ])\r\n\r\n  const addMCQ = () => {\r\n    const newSurvey = {...survey};\r\n    const newMCQ = {\r\n      id: (survey.length + 1),\r\n      questionType: \"MCQ\",\r\n      answerList: [{ id: 1, description: \"\" }, { id: 2, description: \"\" }, { id: 3, description: \"\" }]\r\n    }\r\nnewSurvey.push(newMCQ)\r\n    setSurvey(newSurvey)\r\n  }\r\n\r\n  const onFinish = (values) => {\r\n    console.log('Success:', values);\r\n  };\r\n\r\n  const onFinishFailed = (errorInfo) => {\r\n    console.log('Failed:', errorInfo);\r\n  };\r\n\r\n\r\n  return (\r\n    <Form\r\n      name=\"survey\"\r\n      labelCol={{\r\n        span: 8,\r\n      }}\r\n      wrapperCol={{\r\n        span: 16,\r\n      }}\r\n      initialValues={{\r\n        remember: true,\r\n      }}\r\n      onFinish={onFinish}\r\n      onFinishFailed={onFinishFailed}\r\n      autoComplete=\"off\"\r\n    >\r\n      {survey.length ?\r\n        survey.map((question) => {\r\n\r\n          return (\r\n            <>\r\n\r\n              <Form.Item\r\n                label=\"Description\"\r\n                name={question.id}\r\n                initialValue={question.description}\r\n                rules={[\r\n                  {\r\n                    required: false,\r\n                    message: 'Please input your username!',\r\n                  },\r\n                ]}\r\n              >\r\n                <Input />\r\n              </Form.Item>\r\n              {question.questionType === \"MCQ\" ?\r\n                question.answerList.map((answer) => (\r\n                  <Form.Item\r\n                    label={answer.id}\r\n                    name={question.id + \"-\" + answer.id}\r\n                    initialValue={answer.description}\r\n                    rules={[\r\n                      {\r\n                        required: false,\r\n                        message: 'Please input your username!',\r\n                      },\r\n                    ]}\r\n                  >\r\n                    <Input />\r\n                  </Form.Item>\r\n                ))\r\n                : null}\r\n\r\n            </>\r\n          )\r\n        }\r\n        )\r\n        : 'button'}\r\n\r\n      <Button onClick={addMCQ} type={'dashed'}>Add MCQ</Button>\r\n      <Form.Item\r\n        wrapperCol={{\r\n          offset: 8,\r\n          span: 16,\r\n        }}\r\n      >\r\n        <Button type=\"primary\" htmlType=\"submit\">\r\n          Submit\r\n        </Button>\r\n      </Form.Item>\r\n\r\n    </Form>\r\n  );\r\n};\r\n\r\nexport default CreateSurvey;\r\n"],"mappings":";;;AAAA,SAASA,MAAT,EAAiBC,QAAjB,EAA2BC,IAA3B,EAAiCC,KAAjC,EAAwCC,KAAxC,QAAqD,MAArD;AACA,OAAOC,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;;;AAEA,MAAMC,YAAY,GAAG,MAAM;EAAA;;EACzB,MAAM,CAACC,MAAD,EAASC,SAAT,IAAsBH,QAAQ,CAAC,CACnC;IACE,MAAM,CADR;IAEE,gBAAgB,KAFlB;IAGE,cAAc,CACZ;MACE,MAAM,CADR;MAEE,eAAe;IAFjB,CADY,EAKZ;MACE,MAAM,CADR;MAEE,eAAe;IAFjB,CALY,EASZ;MACE,MAAM,CADR;MAEE,eAAe;IAFjB,CATY,EAaZ;MACE,MAAM,CADR;MAEE,eAAe;IAFjB,CAbY,EAiBZ;MACE,MAAM,CADR;MAEE,eAAe;IAFjB,CAjBY,CAHhB;IAyBE,eAAe;EAzBjB,CADmC,EA4BnC;IACE,MAAM,CADR;IAEE,gBAAgB,KAFlB;IAGE,cAAc,CACZ;MACE,MAAM,CADR;MAEE,eAAe;IAFjB,CADY,EAKZ;MACE,MAAM,CADR;MAEE,eAAe;IAFjB,CALY,EASZ;MACE,MAAM,CADR;MAEE,eAAe;IAFjB,CATY,EAaZ;MACE,MAAM,CADR;MAEE,eAAe;IAFjB,CAbY,EAiBZ;MACE,MAAM,CADR;MAEE,eAAe;IAFjB,CAjBY,CAHhB;IAyBE,eAAe;EAzBjB,CA5BmC,EAuDnC;IACE,MAAM,CADR;IAEE,gBAAgB,YAFlB;IAGE,cAAc,IAHhB;IAIE,eAAe;EAJjB,CAvDmC,CAAD,CAApC;;EA+DA,MAAMI,MAAM,GAAG,MAAM;IACnB,MAAMC,SAAS,GAAG,EAAC,GAAGH;IAAJ,CAAlB;IACA,MAAMI,MAAM,GAAG;MACbC,EAAE,EAAGL,MAAM,CAACM,MAAP,GAAgB,CADR;MAEbC,YAAY,EAAE,KAFD;MAGbC,UAAU,EAAE,CAAC;QAAEH,EAAE,EAAE,CAAN;QAASI,WAAW,EAAE;MAAtB,CAAD,EAA6B;QAAEJ,EAAE,EAAE,CAAN;QAASI,WAAW,EAAE;MAAtB,CAA7B,EAAyD;QAAEJ,EAAE,EAAE,CAAN;QAASI,WAAW,EAAE;MAAtB,CAAzD;IAHC,CAAf;IAKJN,SAAS,CAACO,IAAV,CAAeN,MAAf;IACIH,SAAS,CAACE,SAAD,CAAT;EACD,CATD;;EAWA,MAAMQ,QAAQ,GAAIC,MAAD,IAAY;IAC3BC,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBF,MAAxB;EACD,CAFD;;EAIA,MAAMG,cAAc,GAAIC,SAAD,IAAe;IACpCH,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBE,SAAvB;EACD,CAFD;;EAKA,oBACE,QAAC,IAAD;IACE,IAAI,EAAC,QADP;IAEE,QAAQ,EAAE;MACRC,IAAI,EAAE;IADE,CAFZ;IAKE,UAAU,EAAE;MACVA,IAAI,EAAE;IADI,CALd;IAQE,aAAa,EAAE;MACbC,QAAQ,EAAE;IADG,CARjB;IAWE,QAAQ,EAAEP,QAXZ;IAYE,cAAc,EAAEI,cAZlB;IAaE,YAAY,EAAC,KAbf;IAAA,WAeGf,MAAM,CAACM,MAAP,GACCN,MAAM,CAACmB,GAAP,CAAYC,QAAD,IAAc;MAEvB,oBACE;QAAA,wBAEE,QAAC,IAAD,CAAM,IAAN;UACE,KAAK,EAAC,aADR;UAEE,IAAI,EAAEA,QAAQ,CAACf,EAFjB;UAGE,YAAY,EAAEe,QAAQ,CAACX,WAHzB;UAIE,KAAK,EAAE,CACL;YACEY,QAAQ,EAAE,KADZ;YAEEC,OAAO,EAAE;UAFX,CADK,CAJT;UAAA,uBAWE,QAAC,KAAD;YAAA;YAAA;YAAA;UAAA;QAXF;UAAA;UAAA;UAAA;QAAA,QAFF,EAeGF,QAAQ,CAACb,YAAT,KAA0B,KAA1B,GACCa,QAAQ,CAACZ,UAAT,CAAoBW,GAApB,CAAyBI,MAAD,iBACtB,QAAC,IAAD,CAAM,IAAN;UACE,KAAK,EAAEA,MAAM,CAAClB,EADhB;UAEE,IAAI,EAAEe,QAAQ,CAACf,EAAT,GAAc,GAAd,GAAoBkB,MAAM,CAAClB,EAFnC;UAGE,YAAY,EAAEkB,MAAM,CAACd,WAHvB;UAIE,KAAK,EAAE,CACL;YACEY,QAAQ,EAAE,KADZ;YAEEC,OAAO,EAAE;UAFX,CADK,CAJT;UAAA,uBAWE,QAAC,KAAD;YAAA;YAAA;YAAA;UAAA;QAXF;UAAA;UAAA;UAAA;QAAA,QADF,CADD,GAgBG,IA/BN;MAAA,gBADF;IAoCD,CAtCD,CADD,GAyCG,QAxDN,eA0DE,QAAC,MAAD;MAAQ,OAAO,EAAEpB,MAAjB;MAAyB,IAAI,EAAE,QAA/B;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QA1DF,eA2DE,QAAC,IAAD,CAAM,IAAN;MACE,UAAU,EAAE;QACVsB,MAAM,EAAE,CADE;QAEVP,IAAI,EAAE;MAFI,CADd;MAAA,uBAME,QAAC,MAAD;QAAQ,IAAI,EAAC,SAAb;QAAuB,QAAQ,EAAC,QAAhC;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IANF;MAAA;MAAA;MAAA;IAAA,QA3DF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAyED,CA7JD;;GAAMlB,Y;;KAAAA,Y;AA+JN,eAAeA,YAAf"},"metadata":{},"sourceType":"module"}